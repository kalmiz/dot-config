export VPN_USER="kalmi"

function pidof {
    COMMAND=$1
        PID=`ps -A -o pid,command | grep -e $COMMAND | grep -v grep | awk '{print $1}'`
    if [ -n "$PID" ]; then
        echo "$PID"
    fi
}

function vpn_password {
    security 2>&1 >/dev/null find-generic-password -ga "kinja-vpn" \
    | ruby -e 'print $1 if STDIN.gets =~ /^password: "(.*)"$/'
}

shopt -s extglob
function vpn {
    case "$1" in
        us)
            local VPN=${VPN_HOST:-"vpn-aws.kinja-ops.com"}
            vpn_handler $2
            ;;
        eu)
            local VPN="vpn-aws-eu.kinja-ops.com"
            vpn_handler $2
            ;;
         @(start|status) )
            vpn us $1
            [ "$1" = "start" ] && sleep 5
            vpn eu $1
            ;;
        stop)
            # stop in reserve order
            vpn eu $1
            sleep 5
            vpn us $1
            ;;
        *)
            vpn_handler help
    esac
}

function vpn_handler {
    local HOST=${VPN:-"vpn-aws.kinja-ops.com"}
    local OPENCONNECT=$(pidof "openconnect.*${HOST}")
    local USERNAME=${VPN_USER}
    local LOCALUSER=$(whoami)

    case "$1" in
        start)
            if [ -z "$OPENCONNECT" ] ; then
                echo "== Starting VPN"
                echo $(vpn_password) | sudo openconnect --no-dtls --script=/Users/${LOCALUSER}/bin/vpnc-script --background -u ${USERNAME} --passwd-on-stdin ${HOST}
            echo "Done"
            fi
            ;;
        stop)
            if [ -n "$OPENCONNECT" ] ; then
                echo "== Stopping VPN"
                sudo kill -SIGINT ${OPENCONNECT}
                echo "Done"
            fi
            ;;
        restart)
            vpn stop
            vpn start
            ;;
        status)
            if [ "x$OPENCONNECT" == "x" ]; then
                echo "$HOST VPN is not running."
                return 1
            else
                echo "$HOST VPN is running. PID: $OPENCONNECT"
            fi
            ;;
        help)
            echo "Usage: vpn [us|eu] {start|stop|status|restart}"
            return 1
    esac
}
if [ -f ~/.bashrc ]; then
    source ~/.bashrc
fi

[ -f ~/.fzf.bash ] && source ~/.fzf.bash
[ -f /usr/local/etc/bash_completion ] && . /usr/local/etc/bash_completion
[ -f /Applications/Docker.app/Contents/Resources/etc/docker.bash-completion ] && . /Applications/Docker.app/Contents/Resources/etc/docker.bash-completion
[ -f /usr/local/bin/kubectl ] && . <(kubectl completion bash)
[ -f ~/.config/git/git-completion.bash ] && . ~/.config/git/git-completion.bash

complete -C aws_completer aws

export PATH="$HOME/.cargo/bin:$PATH"
