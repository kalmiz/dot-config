#!/bin/bash

export HISTCONTROL=ignoredups:erasedups  # no duplicate entries
export HISTSIZE=100000                   # big big history
export HISTFILESIZE=100000               # big big history
shopt -s histappend # append to history, don't overwrite it

if [ -x "$(command -v rg)" ]; then
    export FZF_DEFAULT_COMMAND='rg --files'
else
    export FZF_DEFAULT_COMMAND="ack -f"
fi
#bind -x '"\C-p": vim $(fzf);'
export FZF_CTRL_T_COMMAND=$FZF_DEFAULT_COMMAND
export NVIM_LISTEN_ADDRESS="/tmp/nvimsocket"
export EDITOR="vim"
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export PATH="/usr/local/bin:$PATH"

alias hh="history -r"
alias ll="ls -lG"
alias l.="ls -ldG .?*"
alias vi=$EDITOR
alias r="nvr --remote"
alias e="$EDITOR \$(fzf)"
alias :q="exit"
alias gd="git diff"
alias gs="git status"
# set kubectl config and namespace to help autocomplete.
# example: `$ kcn --namespace=prod
alias kcn="kubectl config set-context \$(kubectl config current-context)"
alias clean="printf '\E[H\E[3J'"
alias icat="kitty +kitten icat"

if [ $(uname) == "Darwin" ]; then
	alias iprenew="sudo ipconfig set en0 DHCP"
	[[ -s $(brew --prefix)/etc/profile.d/autojump.sh ]] && . $(brew --prefix)/etc/profile.d/autojump.sh
	export PS1='\W\$ '
	if [ -f /usr/local/bin/kubectl ]; then
		export PS1="[\$(kubectl config current-context)]$PS1"
	fi
fi

if [ -d $HOME/Projects ]; then
	export GOPATH=$HOME/Projects/go
	export PATH=$GOPATH/bin:$PATH
fi

if [ -d $HOME/bin ]; then
	export PATH=$HOME/bin:$PATH
fi

if [ -d $HOME/.cargo/bin ]; then
	export PATH="$HOME/.cargo/bin:$PATH"
fi

[ -f ~/.fzf.bash ] && source ~/.fzf.bash
[ -f /usr/local/etc/bash_completion ] && . /usr/local/etc/bash_completion
[ -f /Applications/Docker.app/Contents/Resources/etc/docker.bash-completion ] && . /Applications/Docker.app/Contents/Resources/etc/docker.bash-completion
[ -f /usr/local/bin/kubectl ] && . <(kubectl completion bash)
[ -f ~/.config/git/git-completion.bash ] && . ~/.config/git/git-completion.bash

complete -C aws_completer aws
[ -f ~/.profabevjava ] && . ~/.profabevjava

function ap() {
  if [ "$#" -eq 0 ]; then
    [ -z "$AP_PROFILE" ] && echo "No profile set" || echo "Using aws profile $AP_PROFILE"
  else
    unset AWS_ACCESS_KEY_ID
    unset AWS_SECRET_ACCESS_KEY
    unset AWS_SESSION_TOKEN

    export AWS_PROFILE=$1
    

    echo Please enter mfa token code for the $1 account
    read token
    accountID=$(aws sts get-caller-identity --output text --query 'Account')
    mfaArn=$(aws iam get-user --output text --query User.Arn|sed 's/:user\//:mfa\//')
    credentials=$(aws sts get-session-token --serial-number $mfaArn --token-code $token --duration-seconds 28799)
    export AWS_ACCESS_KEY_ID=$(echo $credentials | python -c 'import sys, json; print json.load(sys.stdin)["Credentials"]["AccessKeyId"]')
    export AWS_SECRET_ACCESS_KEY=$(echo $credentials | python -c 'import sys, json; print json.load(sys.stdin)["Credentials"]["SecretAccessKey"]')
    export AWS_SESSION_TOKEN=$(echo $credentials | python -c 'import sys, json; print json.load(sys.stdin)["Credentials"]["SessionToken"]')
    unset AWS_PROFILE
    export AP_PROFILE=$1

    echo Using aws profile $AP_PROFILE
  fi
}
if [ -e /Users/kalmi/.nix-profile/etc/profile.d/nix.sh ]; then . /Users/kalmi/.nix-profile/etc/profile.d/nix.sh; fi # added by Nix installer
